#!/usr/bin/python
# -*- coding:utf-8 -*-

import sys
import re
import ipstaff

ir = ipstaff.rir()
jpflag = 0

def stdin_replace():
    cache = {}
    cache['ip'] = {}
    cache['name'] = {}
    ipv4_rexp = re.compile('\d{0,3}\.\d{0,3}\.\d{0,3}\.\d{0,3}')
    for row in sys.stdin.readlines():
        row = row.rstrip()
        m = ipv4_rexp.findall(row)
        if m == []:
            print row
            continue
        for ip in m:
            if not ip in cache['ip'].keys():
                cc = ir.ipv4tocc(ip)
                cn = None
                if not cc is None:
                    if not cc in cache['name'].keys():
                        cn = ir.cctoname(cc)[jpflag].encode('utf-8')
                        cache['name'][cc] = cn
                    else:
                        cn = cache['name'][cc]
                cache['ip'][ip] = '{0}({1}:{2})'.format(ip, cc, cn)
            row = re.sub('(?<!\d)%s(?!\d)' % ip, cache['ip'][ip], row)
        print row

def resout(ip):
    if not ir.is_ipv4(ip):
        print '%s is not ipv4 address.' % ip
        sys.exit()
    cc = str(ir.ipv4tocc(ip))
    cn = None
    if not cc is None:
        cn = ir.cctoname(cc)[jpflag]
    print 'IP: %s\nCountryCode: %s\nCountry: %s' % (ip, cc, cn)

if __name__ == '__main__':
    try:
        argv = sys.argv
        if len(argv) == 1:
            stdin_replace()
        elif len(argv) == 2:
            arg1 = argv[1]
            if arg1 == '-j':
                jpflag = 1
                stdin_replace()
            else:
                resout(arg1)
        elif len(argv) == 3:
            if argv[1] == '-j':
                jpflag = 1
                resout(argv[2])
            else:
                raise Exception('invalid argument : %s' % arg1)
        else:
            raise Exception('invalid argument count.')
    except KeyboardInterrupt, IOError:
        sys.exit()
